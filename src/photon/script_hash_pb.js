/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.script_hash.BalanceRequest', null, global);
goog.exportSymbol('proto.script_hash.BalanceResponse', null, global);
goog.exportSymbol('proto.script_hash.HistoryRequest', null, global);
goog.exportSymbol('proto.script_hash.HistoryRequest.Range', null, global);
goog.exportSymbol('proto.script_hash.HistoryResponse', null, global);
goog.exportSymbol('proto.script_hash.HistoryResponse.ConfirmedItem', null, global);
goog.exportSymbol('proto.script_hash.HistoryResponse.ContinuationSpec', null, global);
goog.exportSymbol('proto.script_hash.HistoryResponse.MempoolItem', null, global);
goog.exportSymbol('proto.script_hash.ListUnspentRequest', null, global);
goog.exportSymbol('proto.script_hash.ListUnspentResponse', null, global);
goog.exportSymbol('proto.script_hash.ListUnspentResponse.UnspentItem', null, global);
goog.exportSymbol('proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem', null, global);
goog.exportSymbol('proto.script_hash.SubscribeRequest', null, global);
goog.exportSymbol('proto.script_hash.SubscribeResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script_hash.BalanceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script_hash.BalanceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.script_hash.BalanceRequest.displayName = 'proto.script_hash.BalanceRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script_hash.BalanceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.script_hash.BalanceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script_hash.BalanceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.BalanceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scriptHash: msg.getScriptHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script_hash.BalanceRequest}
 */
proto.script_hash.BalanceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script_hash.BalanceRequest;
  return proto.script_hash.BalanceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script_hash.BalanceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script_hash.BalanceRequest}
 */
proto.script_hash.BalanceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScriptHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script_hash.BalanceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script_hash.BalanceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script_hash.BalanceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.BalanceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScriptHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes script_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.script_hash.BalanceRequest.prototype.getScriptHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes script_hash = 1;
 * This is a type-conversion wrapper around `getScriptHash()`
 * @return {string}
 */
proto.script_hash.BalanceRequest.prototype.getScriptHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScriptHash()));
};


/**
 * optional bytes script_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScriptHash()`
 * @return {!Uint8Array}
 */
proto.script_hash.BalanceRequest.prototype.getScriptHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScriptHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.script_hash.BalanceRequest.prototype.setScriptHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script_hash.BalanceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script_hash.BalanceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.script_hash.BalanceResponse.displayName = 'proto.script_hash.BalanceResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script_hash.BalanceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.script_hash.BalanceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script_hash.BalanceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.BalanceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    confirmed: jspb.Message.getFieldWithDefault(msg, 1, 0),
    unconfirmed: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script_hash.BalanceResponse}
 */
proto.script_hash.BalanceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script_hash.BalanceResponse;
  return proto.script_hash.BalanceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script_hash.BalanceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script_hash.BalanceResponse}
 */
proto.script_hash.BalanceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfirmed(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUnconfirmed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script_hash.BalanceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script_hash.BalanceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script_hash.BalanceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.BalanceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfirmed();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUnconfirmed();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 confirmed = 1;
 * @return {number}
 */
proto.script_hash.BalanceResponse.prototype.getConfirmed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.script_hash.BalanceResponse.prototype.setConfirmed = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 unconfirmed = 2;
 * @return {number}
 */
proto.script_hash.BalanceResponse.prototype.getUnconfirmed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.script_hash.BalanceResponse.prototype.setUnconfirmed = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script_hash.HistoryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script_hash.HistoryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.script_hash.HistoryRequest.displayName = 'proto.script_hash.HistoryRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script_hash.HistoryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.script_hash.HistoryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script_hash.HistoryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.HistoryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scriptHash: msg.getScriptHash_asB64(),
    range: (f = msg.getRange()) && proto.script_hash.HistoryRequest.Range.toObject(includeInstance, f),
    includeMempoolItems: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script_hash.HistoryRequest}
 */
proto.script_hash.HistoryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script_hash.HistoryRequest;
  return proto.script_hash.HistoryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script_hash.HistoryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script_hash.HistoryRequest}
 */
proto.script_hash.HistoryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScriptHash(value);
      break;
    case 2:
      var value = new proto.script_hash.HistoryRequest.Range;
      reader.readMessage(value,proto.script_hash.HistoryRequest.Range.deserializeBinaryFromReader);
      msg.setRange(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeMempoolItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script_hash.HistoryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script_hash.HistoryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script_hash.HistoryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.HistoryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScriptHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRange();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script_hash.HistoryRequest.Range.serializeBinaryToWriter
    );
  }
  f = message.getIncludeMempoolItems();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script_hash.HistoryRequest.Range = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script_hash.HistoryRequest.Range, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.script_hash.HistoryRequest.Range.displayName = 'proto.script_hash.HistoryRequest.Range';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script_hash.HistoryRequest.Range.prototype.toObject = function(opt_includeInstance) {
  return proto.script_hash.HistoryRequest.Range.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script_hash.HistoryRequest.Range} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.HistoryRequest.Range.toObject = function(includeInstance, msg) {
  var f, obj = {
    startHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    startPos: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endOffset: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script_hash.HistoryRequest.Range}
 */
proto.script_hash.HistoryRequest.Range.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script_hash.HistoryRequest.Range;
  return proto.script_hash.HistoryRequest.Range.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script_hash.HistoryRequest.Range} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script_hash.HistoryRequest.Range}
 */
proto.script_hash.HistoryRequest.Range.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartPos(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script_hash.HistoryRequest.Range.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script_hash.HistoryRequest.Range.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script_hash.HistoryRequest.Range} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.HistoryRequest.Range.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartHeight();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getStartPos();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getEndOffset();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 start_height = 1;
 * @return {number}
 */
proto.script_hash.HistoryRequest.Range.prototype.getStartHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.script_hash.HistoryRequest.Range.prototype.setStartHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 start_pos = 2;
 * @return {number}
 */
proto.script_hash.HistoryRequest.Range.prototype.getStartPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.script_hash.HistoryRequest.Range.prototype.setStartPos = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 end_offset = 3;
 * @return {number}
 */
proto.script_hash.HistoryRequest.Range.prototype.getEndOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.script_hash.HistoryRequest.Range.prototype.setEndOffset = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes script_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.script_hash.HistoryRequest.prototype.getScriptHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes script_hash = 1;
 * This is a type-conversion wrapper around `getScriptHash()`
 * @return {string}
 */
proto.script_hash.HistoryRequest.prototype.getScriptHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScriptHash()));
};


/**
 * optional bytes script_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScriptHash()`
 * @return {!Uint8Array}
 */
proto.script_hash.HistoryRequest.prototype.getScriptHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScriptHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.script_hash.HistoryRequest.prototype.setScriptHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Range range = 2;
 * @return {?proto.script_hash.HistoryRequest.Range}
 */
proto.script_hash.HistoryRequest.prototype.getRange = function() {
  return /** @type{?proto.script_hash.HistoryRequest.Range} */ (
    jspb.Message.getWrapperField(this, proto.script_hash.HistoryRequest.Range, 2));
};


/** @param {?proto.script_hash.HistoryRequest.Range|undefined} value */
proto.script_hash.HistoryRequest.prototype.setRange = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.script_hash.HistoryRequest.prototype.clearRange = function() {
  this.setRange(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script_hash.HistoryRequest.prototype.hasRange = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool include_mempool_items = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.script_hash.HistoryRequest.prototype.getIncludeMempoolItems = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.script_hash.HistoryRequest.prototype.setIncludeMempoolItems = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script_hash.HistoryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.script_hash.HistoryResponse.repeatedFields_, null);
};
goog.inherits(proto.script_hash.HistoryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.script_hash.HistoryResponse.displayName = 'proto.script_hash.HistoryResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.script_hash.HistoryResponse.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script_hash.HistoryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.script_hash.HistoryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script_hash.HistoryResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.HistoryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    confirmedItemsList: jspb.Message.toObjectList(msg.getConfirmedItemsList(),
    proto.script_hash.HistoryResponse.ConfirmedItem.toObject, includeInstance),
    confirmedContinuation: (f = msg.getConfirmedContinuation()) && proto.script_hash.HistoryResponse.ContinuationSpec.toObject(includeInstance, f),
    mempoolItemsList: jspb.Message.toObjectList(msg.getMempoolItemsList(),
    proto.script_hash.HistoryResponse.MempoolItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script_hash.HistoryResponse}
 */
proto.script_hash.HistoryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script_hash.HistoryResponse;
  return proto.script_hash.HistoryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script_hash.HistoryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script_hash.HistoryResponse}
 */
proto.script_hash.HistoryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script_hash.HistoryResponse.ConfirmedItem;
      reader.readMessage(value,proto.script_hash.HistoryResponse.ConfirmedItem.deserializeBinaryFromReader);
      msg.addConfirmedItems(value);
      break;
    case 2:
      var value = new proto.script_hash.HistoryResponse.ContinuationSpec;
      reader.readMessage(value,proto.script_hash.HistoryResponse.ContinuationSpec.deserializeBinaryFromReader);
      msg.setConfirmedContinuation(value);
      break;
    case 3:
      var value = new proto.script_hash.HistoryResponse.MempoolItem;
      reader.readMessage(value,proto.script_hash.HistoryResponse.MempoolItem.deserializeBinaryFromReader);
      msg.addMempoolItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script_hash.HistoryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script_hash.HistoryResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script_hash.HistoryResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.HistoryResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfirmedItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.script_hash.HistoryResponse.ConfirmedItem.serializeBinaryToWriter
    );
  }
  f = message.getConfirmedContinuation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.script_hash.HistoryResponse.ContinuationSpec.serializeBinaryToWriter
    );
  }
  f = message.getMempoolItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.script_hash.HistoryResponse.MempoolItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script_hash.HistoryResponse.ConfirmedItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script_hash.HistoryResponse.ConfirmedItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.script_hash.HistoryResponse.ConfirmedItem.displayName = 'proto.script_hash.HistoryResponse.ConfirmedItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script_hash.HistoryResponse.ConfirmedItem.prototype.toObject = function(opt_includeInstance) {
  return proto.script_hash.HistoryResponse.ConfirmedItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script_hash.HistoryResponse.ConfirmedItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.HistoryResponse.ConfirmedItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txHash: msg.getTxHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script_hash.HistoryResponse.ConfirmedItem}
 */
proto.script_hash.HistoryResponse.ConfirmedItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script_hash.HistoryResponse.ConfirmedItem;
  return proto.script_hash.HistoryResponse.ConfirmedItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script_hash.HistoryResponse.ConfirmedItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script_hash.HistoryResponse.ConfirmedItem}
 */
proto.script_hash.HistoryResponse.ConfirmedItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script_hash.HistoryResponse.ConfirmedItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script_hash.HistoryResponse.ConfirmedItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script_hash.HistoryResponse.ConfirmedItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.HistoryResponse.ConfirmedItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTxHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 height = 1;
 * @return {number}
 */
proto.script_hash.HistoryResponse.ConfirmedItem.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.script_hash.HistoryResponse.ConfirmedItem.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes tx_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.script_hash.HistoryResponse.ConfirmedItem.prototype.getTxHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes tx_hash = 2;
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {string}
 */
proto.script_hash.HistoryResponse.ConfirmedItem.prototype.getTxHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxHash()));
};


/**
 * optional bytes tx_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {!Uint8Array}
 */
proto.script_hash.HistoryResponse.ConfirmedItem.prototype.getTxHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.script_hash.HistoryResponse.ConfirmedItem.prototype.setTxHash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script_hash.HistoryResponse.MempoolItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script_hash.HistoryResponse.MempoolItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.script_hash.HistoryResponse.MempoolItem.displayName = 'proto.script_hash.HistoryResponse.MempoolItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script_hash.HistoryResponse.MempoolItem.prototype.toObject = function(opt_includeInstance) {
  return proto.script_hash.HistoryResponse.MempoolItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script_hash.HistoryResponse.MempoolItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.HistoryResponse.MempoolItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    txHash: msg.getTxHash_asB64(),
    fee: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hasUnconfirmedParent: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script_hash.HistoryResponse.MempoolItem}
 */
proto.script_hash.HistoryResponse.MempoolItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script_hash.HistoryResponse.MempoolItem;
  return proto.script_hash.HistoryResponse.MempoolItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script_hash.HistoryResponse.MempoolItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script_hash.HistoryResponse.MempoolItem}
 */
proto.script_hash.HistoryResponse.MempoolItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFee(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasUnconfirmedParent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script_hash.HistoryResponse.MempoolItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script_hash.HistoryResponse.MempoolItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script_hash.HistoryResponse.MempoolItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.HistoryResponse.MempoolItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getHasUnconfirmedParent();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bytes tx_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.script_hash.HistoryResponse.MempoolItem.prototype.getTxHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes tx_hash = 1;
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {string}
 */
proto.script_hash.HistoryResponse.MempoolItem.prototype.getTxHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxHash()));
};


/**
 * optional bytes tx_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {!Uint8Array}
 */
proto.script_hash.HistoryResponse.MempoolItem.prototype.getTxHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.script_hash.HistoryResponse.MempoolItem.prototype.setTxHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 fee = 2;
 * @return {number}
 */
proto.script_hash.HistoryResponse.MempoolItem.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.script_hash.HistoryResponse.MempoolItem.prototype.setFee = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool has_unconfirmed_parent = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.script_hash.HistoryResponse.MempoolItem.prototype.getHasUnconfirmedParent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.script_hash.HistoryResponse.MempoolItem.prototype.setHasUnconfirmedParent = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script_hash.HistoryResponse.ContinuationSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script_hash.HistoryResponse.ContinuationSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.script_hash.HistoryResponse.ContinuationSpec.displayName = 'proto.script_hash.HistoryResponse.ContinuationSpec';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script_hash.HistoryResponse.ContinuationSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.script_hash.HistoryResponse.ContinuationSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script_hash.HistoryResponse.ContinuationSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.HistoryResponse.ContinuationSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    startHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    startPos: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script_hash.HistoryResponse.ContinuationSpec}
 */
proto.script_hash.HistoryResponse.ContinuationSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script_hash.HistoryResponse.ContinuationSpec;
  return proto.script_hash.HistoryResponse.ContinuationSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script_hash.HistoryResponse.ContinuationSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script_hash.HistoryResponse.ContinuationSpec}
 */
proto.script_hash.HistoryResponse.ContinuationSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartPos(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script_hash.HistoryResponse.ContinuationSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script_hash.HistoryResponse.ContinuationSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script_hash.HistoryResponse.ContinuationSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.HistoryResponse.ContinuationSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartHeight();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getStartPos();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 start_height = 1;
 * @return {number}
 */
proto.script_hash.HistoryResponse.ContinuationSpec.prototype.getStartHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.script_hash.HistoryResponse.ContinuationSpec.prototype.setStartHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 start_pos = 2;
 * @return {number}
 */
proto.script_hash.HistoryResponse.ContinuationSpec.prototype.getStartPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.script_hash.HistoryResponse.ContinuationSpec.prototype.setStartPos = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated ConfirmedItem confirmed_items = 1;
 * @return {!Array<!proto.script_hash.HistoryResponse.ConfirmedItem>}
 */
proto.script_hash.HistoryResponse.prototype.getConfirmedItemsList = function() {
  return /** @type{!Array<!proto.script_hash.HistoryResponse.ConfirmedItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.script_hash.HistoryResponse.ConfirmedItem, 1));
};


/** @param {!Array<!proto.script_hash.HistoryResponse.ConfirmedItem>} value */
proto.script_hash.HistoryResponse.prototype.setConfirmedItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.script_hash.HistoryResponse.ConfirmedItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.script_hash.HistoryResponse.ConfirmedItem}
 */
proto.script_hash.HistoryResponse.prototype.addConfirmedItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.script_hash.HistoryResponse.ConfirmedItem, opt_index);
};


proto.script_hash.HistoryResponse.prototype.clearConfirmedItemsList = function() {
  this.setConfirmedItemsList([]);
};


/**
 * optional ContinuationSpec confirmed_continuation = 2;
 * @return {?proto.script_hash.HistoryResponse.ContinuationSpec}
 */
proto.script_hash.HistoryResponse.prototype.getConfirmedContinuation = function() {
  return /** @type{?proto.script_hash.HistoryResponse.ContinuationSpec} */ (
    jspb.Message.getWrapperField(this, proto.script_hash.HistoryResponse.ContinuationSpec, 2));
};


/** @param {?proto.script_hash.HistoryResponse.ContinuationSpec|undefined} value */
proto.script_hash.HistoryResponse.prototype.setConfirmedContinuation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.script_hash.HistoryResponse.prototype.clearConfirmedContinuation = function() {
  this.setConfirmedContinuation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.script_hash.HistoryResponse.prototype.hasConfirmedContinuation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated MempoolItem mempool_items = 3;
 * @return {!Array<!proto.script_hash.HistoryResponse.MempoolItem>}
 */
proto.script_hash.HistoryResponse.prototype.getMempoolItemsList = function() {
  return /** @type{!Array<!proto.script_hash.HistoryResponse.MempoolItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.script_hash.HistoryResponse.MempoolItem, 3));
};


/** @param {!Array<!proto.script_hash.HistoryResponse.MempoolItem>} value */
proto.script_hash.HistoryResponse.prototype.setMempoolItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.script_hash.HistoryResponse.MempoolItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.script_hash.HistoryResponse.MempoolItem}
 */
proto.script_hash.HistoryResponse.prototype.addMempoolItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.script_hash.HistoryResponse.MempoolItem, opt_index);
};


proto.script_hash.HistoryResponse.prototype.clearMempoolItemsList = function() {
  this.setMempoolItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script_hash.ListUnspentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script_hash.ListUnspentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.script_hash.ListUnspentRequest.displayName = 'proto.script_hash.ListUnspentRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script_hash.ListUnspentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.script_hash.ListUnspentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script_hash.ListUnspentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.ListUnspentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scriptHash: msg.getScriptHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script_hash.ListUnspentRequest}
 */
proto.script_hash.ListUnspentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script_hash.ListUnspentRequest;
  return proto.script_hash.ListUnspentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script_hash.ListUnspentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script_hash.ListUnspentRequest}
 */
proto.script_hash.ListUnspentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScriptHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script_hash.ListUnspentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script_hash.ListUnspentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script_hash.ListUnspentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.ListUnspentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScriptHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes script_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.script_hash.ListUnspentRequest.prototype.getScriptHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes script_hash = 1;
 * This is a type-conversion wrapper around `getScriptHash()`
 * @return {string}
 */
proto.script_hash.ListUnspentRequest.prototype.getScriptHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScriptHash()));
};


/**
 * optional bytes script_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScriptHash()`
 * @return {!Uint8Array}
 */
proto.script_hash.ListUnspentRequest.prototype.getScriptHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScriptHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.script_hash.ListUnspentRequest.prototype.setScriptHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script_hash.ListUnspentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.script_hash.ListUnspentResponse.repeatedFields_, null);
};
goog.inherits(proto.script_hash.ListUnspentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.script_hash.ListUnspentResponse.displayName = 'proto.script_hash.ListUnspentResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.script_hash.ListUnspentResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script_hash.ListUnspentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.script_hash.ListUnspentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script_hash.ListUnspentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.ListUnspentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemsList: jspb.Message.toObjectList(msg.getItemsList(),
    proto.script_hash.ListUnspentResponse.UnspentItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script_hash.ListUnspentResponse}
 */
proto.script_hash.ListUnspentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script_hash.ListUnspentResponse;
  return proto.script_hash.ListUnspentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script_hash.ListUnspentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script_hash.ListUnspentResponse}
 */
proto.script_hash.ListUnspentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.script_hash.ListUnspentResponse.UnspentItem;
      reader.readMessage(value,proto.script_hash.ListUnspentResponse.UnspentItem.deserializeBinaryFromReader);
      msg.addItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script_hash.ListUnspentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script_hash.ListUnspentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script_hash.ListUnspentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.ListUnspentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.script_hash.ListUnspentResponse.UnspentItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script_hash.ListUnspentResponse.UnspentItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.script_hash.ListUnspentResponse.UnspentItem.repeatedFields_, null);
};
goog.inherits(proto.script_hash.ListUnspentResponse.UnspentItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.script_hash.ListUnspentResponse.UnspentItem.displayName = 'proto.script_hash.ListUnspentResponse.UnspentItem';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.script_hash.ListUnspentResponse.UnspentItem.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script_hash.ListUnspentResponse.UnspentItem.prototype.toObject = function(opt_includeInstance) {
  return proto.script_hash.ListUnspentResponse.UnspentItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script_hash.ListUnspentResponse.UnspentItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.ListUnspentResponse.UnspentItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txHash: msg.getTxHash_asB64(),
    outputItemsList: jspb.Message.toObjectList(msg.getOutputItemsList(),
    proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script_hash.ListUnspentResponse.UnspentItem}
 */
proto.script_hash.ListUnspentResponse.UnspentItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script_hash.ListUnspentResponse.UnspentItem;
  return proto.script_hash.ListUnspentResponse.UnspentItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script_hash.ListUnspentResponse.UnspentItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script_hash.ListUnspentResponse.UnspentItem}
 */
proto.script_hash.ListUnspentResponse.UnspentItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTxHash(value);
      break;
    case 3:
      var value = new proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem;
      reader.readMessage(value,proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem.deserializeBinaryFromReader);
      msg.addOutputItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script_hash.ListUnspentResponse.UnspentItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script_hash.ListUnspentResponse.UnspentItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script_hash.ListUnspentResponse.UnspentItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.ListUnspentResponse.UnspentItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTxHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getOutputItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem.displayName = 'proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem.prototype.toObject = function(opt_includeInstance) {
  return proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    pos: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem}
 */
proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem;
  return proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem}
 */
proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPos(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPos();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint32 pos = 1;
 * @return {number}
 */
proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem.prototype.getPos = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem.prototype.setPos = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 value = 2;
 * @return {number}
 */
proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem.prototype.setValue = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 height = 1;
 * @return {number}
 */
proto.script_hash.ListUnspentResponse.UnspentItem.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.script_hash.ListUnspentResponse.UnspentItem.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes tx_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.script_hash.ListUnspentResponse.UnspentItem.prototype.getTxHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes tx_hash = 2;
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {string}
 */
proto.script_hash.ListUnspentResponse.UnspentItem.prototype.getTxHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTxHash()));
};


/**
 * optional bytes tx_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTxHash()`
 * @return {!Uint8Array}
 */
proto.script_hash.ListUnspentResponse.UnspentItem.prototype.getTxHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTxHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.script_hash.ListUnspentResponse.UnspentItem.prototype.setTxHash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated OutputItem output_items = 3;
 * @return {!Array<!proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem>}
 */
proto.script_hash.ListUnspentResponse.UnspentItem.prototype.getOutputItemsList = function() {
  return /** @type{!Array<!proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem, 3));
};


/** @param {!Array<!proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem>} value */
proto.script_hash.ListUnspentResponse.UnspentItem.prototype.setOutputItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem}
 */
proto.script_hash.ListUnspentResponse.UnspentItem.prototype.addOutputItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.script_hash.ListUnspentResponse.UnspentItem.OutputItem, opt_index);
};


proto.script_hash.ListUnspentResponse.UnspentItem.prototype.clearOutputItemsList = function() {
  this.setOutputItemsList([]);
};


/**
 * repeated UnspentItem items = 1;
 * @return {!Array<!proto.script_hash.ListUnspentResponse.UnspentItem>}
 */
proto.script_hash.ListUnspentResponse.prototype.getItemsList = function() {
  return /** @type{!Array<!proto.script_hash.ListUnspentResponse.UnspentItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.script_hash.ListUnspentResponse.UnspentItem, 1));
};


/** @param {!Array<!proto.script_hash.ListUnspentResponse.UnspentItem>} value */
proto.script_hash.ListUnspentResponse.prototype.setItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.script_hash.ListUnspentResponse.UnspentItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.script_hash.ListUnspentResponse.UnspentItem}
 */
proto.script_hash.ListUnspentResponse.prototype.addItems = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.script_hash.ListUnspentResponse.UnspentItem, opt_index);
};


proto.script_hash.ListUnspentResponse.prototype.clearItemsList = function() {
  this.setItemsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script_hash.SubscribeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script_hash.SubscribeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.script_hash.SubscribeRequest.displayName = 'proto.script_hash.SubscribeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script_hash.SubscribeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.script_hash.SubscribeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script_hash.SubscribeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.SubscribeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scriptHash: msg.getScriptHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script_hash.SubscribeRequest}
 */
proto.script_hash.SubscribeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script_hash.SubscribeRequest;
  return proto.script_hash.SubscribeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script_hash.SubscribeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script_hash.SubscribeRequest}
 */
proto.script_hash.SubscribeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setScriptHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script_hash.SubscribeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script_hash.SubscribeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script_hash.SubscribeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.SubscribeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScriptHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes script_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.script_hash.SubscribeRequest.prototype.getScriptHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes script_hash = 1;
 * This is a type-conversion wrapper around `getScriptHash()`
 * @return {string}
 */
proto.script_hash.SubscribeRequest.prototype.getScriptHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getScriptHash()));
};


/**
 * optional bytes script_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getScriptHash()`
 * @return {!Uint8Array}
 */
proto.script_hash.SubscribeRequest.prototype.getScriptHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getScriptHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.script_hash.SubscribeRequest.prototype.setScriptHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.script_hash.SubscribeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.script_hash.SubscribeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.script_hash.SubscribeResponse.displayName = 'proto.script_hash.SubscribeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.script_hash.SubscribeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.script_hash.SubscribeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.script_hash.SubscribeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.SubscribeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    confirmedStatus: msg.getConfirmedStatus_asB64(),
    unconfirmedStatus: msg.getUnconfirmedStatus_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.script_hash.SubscribeResponse}
 */
proto.script_hash.SubscribeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.script_hash.SubscribeResponse;
  return proto.script_hash.SubscribeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.script_hash.SubscribeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.script_hash.SubscribeResponse}
 */
proto.script_hash.SubscribeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfirmedStatus(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUnconfirmedStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.script_hash.SubscribeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.script_hash.SubscribeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.script_hash.SubscribeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.script_hash.SubscribeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfirmedStatus_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getUnconfirmedStatus_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes confirmed_status = 1;
 * @return {!(string|Uint8Array)}
 */
proto.script_hash.SubscribeResponse.prototype.getConfirmedStatus = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes confirmed_status = 1;
 * This is a type-conversion wrapper around `getConfirmedStatus()`
 * @return {string}
 */
proto.script_hash.SubscribeResponse.prototype.getConfirmedStatus_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfirmedStatus()));
};


/**
 * optional bytes confirmed_status = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConfirmedStatus()`
 * @return {!Uint8Array}
 */
proto.script_hash.SubscribeResponse.prototype.getConfirmedStatus_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfirmedStatus()));
};


/** @param {!(string|Uint8Array)} value */
proto.script_hash.SubscribeResponse.prototype.setConfirmedStatus = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes unconfirmed_status = 2;
 * @return {!(string|Uint8Array)}
 */
proto.script_hash.SubscribeResponse.prototype.getUnconfirmedStatus = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes unconfirmed_status = 2;
 * This is a type-conversion wrapper around `getUnconfirmedStatus()`
 * @return {string}
 */
proto.script_hash.SubscribeResponse.prototype.getUnconfirmedStatus_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUnconfirmedStatus()));
};


/**
 * optional bytes unconfirmed_status = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUnconfirmedStatus()`
 * @return {!Uint8Array}
 */
proto.script_hash.SubscribeResponse.prototype.getUnconfirmedStatus_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUnconfirmedStatus()));
};


/** @param {!(string|Uint8Array)} value */
proto.script_hash.SubscribeResponse.prototype.setUnconfirmedStatus = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


goog.object.extend(exports, proto.script_hash);
